/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keypos_34keys.h"

// Adapted from https://github.com/urob/zmk-config
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH1 LH0 RH0 RH1                                              // thumb keys

#define QUICK_TAP_MS 175
#define COMBO_TERM_FAST 20
#define COMBO_TERM_SLOW 35
#define COMBO_HOOK global-quick-tap-ms = <75>;


&caps_word {  // mods deactivate caps-word, requires PR #1441
    /delete-property/ ignore-modifiers;
};

&num_word {   // num-word, requires PR #1441
    layers = <4>;
};

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;              // repeat on tap-into-hold
    hold-trigger-key-positions = <0>;  // tap on interrupt
};

/ {
    behaviors
    {
        hml: hml
        {  // left-hand HRMs
            label = "hml";
            compatible = "zmk,behavior-hold-tap"; 
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            global-quick-tap-ms = <150>;        // requires PR #1387
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;            // requires PR #1423
        };

        hmr: hmr 
        {  // right-hand HRMs
            label = "hmr";
            compatible = "zmk,behavior-hold-tap"; 
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            global-quick-tap-ms = <150>;        // requires PR #1387
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;           // requires PR #1423
        };
    }; // End @urob's config
    
    macros
    {
        win_sc: windows_screenshot
        {
            compatible = "zmk,behavior-macro";
            label = "windows_screenshot";
            #binding-cells = <0>;
            bindings = <&macro_press &kp RGUI &kp LSHFT>,
                       <&macro_tap &kp S>,
                       <&macro_release &kp RGUI &kp LSHFT>;
        };
    };

    combos
    {
        compatible = "zmk,combos";

        combo_screenshot
        {
            timeout-ms = <COMBO_TERM_SLOW>;
            layers = <0>;
            key-positions = <LT0 RT4>;
            bindings = <&win_sc>;
            COMBO_HOOK
        };
        
        combo_copy
        {
            timeout-ms = <COMBO_TERM_SLOW>;
            layers = <0>;
            key-positions = <LM1 LM2>;
            bindings = <&kp LC(C)>;
            COMBO_HOOK
        };
        
        combo_terminal-paste
        {
            timeout-ms = <COMBO_TERM_SLOW>;
            layers = <0>;
            key-positions = <LM2 LM3>;
            bindings = <&kp LC(LS(V))>;
            COMBO_HOOK
        };
        
        combo_windows-paste
        {
            timeout-ms = <COMBO_TERM_SLOW>;
            layers = <2>;
            key-positions = <LM2 LM3>;
            bindings = <&kp LC(V)>;
            COMBO_HOOK
        };
        
        combo_capsword
        {
            timeout-ms = <COMBO_TERM_SLOW>;
            layers = <0>;
            key-positions = <LB4 RB0>;
            bindings = <&caps_word>;
            COMBO_HOOK
        };
        
        combo_esc
        {
            timeout-ms = <COMBO_TERM_SLOW>;
            layers = <0>;
            key-positions = <RM1 RM2>;
            bindings = <&kp ESC>;
            COMBO_HOOK
        };

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer
        {
            bindings = <
                &kp  Q      &kp  W       &kp  F          &kp  P          &kp B                 &kp J        &kp  L       &kp  U       &kp  Y       &kp  QUOT
                &hml LGUI A &hml LCTRL R &hml LALT S     &hml LSHFT T    &kp G                 &kp M        &hmr RSHFT N &hmr RALT E  &hmr RCTRL I &hmr RGUI O
                &kp  Z      &kp  X       &kp  C          &kp  D          &kp V                 &kp K        &kp  H       &kp  CMMA    &kp  DOT     &kp  RET
                                                         &mo  1          &kp SPC               &num_word    &mo  2
            >;
        };

        left_layer
        {
            bindings = <
                &kp NUM_1   &kp NUM_2    &kp NUM_3       &kp NUM_4       &kp NUM_5             &kp NUM_6    &kp NUM_7    &kp NUM_8    &kp NUM_9    &kp NUM_0
                &kp TAB     &kp LC(S)    &kp DQT         &kp PIPE2       &kp HASH              &kp EQL      &kp MINUS    &kp LBKT     &kp RBKT     &kp DEL
                &kp ESC     &kp TILDE    &kp NON_US_BSLH &kp NON_US_HASH &kp TILDE2            &kp UNDER    &kp GRAVE    &kp LBKT     &kp RBKT     &kp DEL
                                                         &mo 1           &kp LGUI              &kp LC(W)    &mo 2
            >;
        };

        right_layer {
            bindings = <
                &kp BANG    &kp ATSN     &kp HASH        &kp DLLR        &kp PRCT              &kp CRRT     &kp AMPS     &kp KMLT     &kp LPRN     &kp RPRN
                &kp HASH    &kp QMARK    &kp FSLH        &kp COLN        &kp SCLN              &kp MINUS    &kp KP_EQUAL &kp LBRC     &kp RBRC     &kp BKSP
                &kp LSFT    &kp KPLS     &kp LBKT        &kp RBKT        &kp BSLH              &kp UNDER    &kp LEFT     &kp DOWN     &kp UP       &kp RIGHT
                                                         &mo 3           &kp LCTRL             &kp RGUI     &mo 2
            >;
        };

        double_layer {
            bindings = <
                &kp NUM_1   &kp NUM_2    &kp NUM_3       &kp NUM_4       &kp NUM_5             &trans       &trans       &trans       &trans       &trans
                &kp F1      &kp F2       &kp F3          &kp F4          &kp F5                &trans       &kp PG_UP    &kp C_VOL_UP &kp C_MUTE   &trans
                &bt BT_CLR  &bt BT_NXT   &bt BT_PRV      &kp F6          &kp F7                &trans       &kp PG_DN    &kp C_VOL_DN &trans       &trans
                                                         &trans          &trans                &trans       &trans
            >;
        };

        num_layer {
            bindings = <
                &trans          &kp NUM_7        &kp NUM_8       &kp NUM_9        &trans               &trans       &trans       &trans       &trans       &trans
                &hml LGUI NUM_0 &hml LCTRL NUM_4 &hml LALT NUM_5 &hml LSHFT NUM_6 &trans               &trans       &trans       &trans       &trans       &trans
                &trans          &kp NUM_1        &kp NUM_2       &kp NUM_3        &trans               &trans       &trans       &trans       &trans       &trans
                                                                 &trans           &trans               &trans       &trans
                >;
        };

    };
};
